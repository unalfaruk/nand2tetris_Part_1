// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	//111a cccc ccdd djjj
	//ALU(x= ,y= ,zx= ,nx= ,zy= ,ny= ,f= ,no= ,out= ,zr= ,ng= ) /* Hack ALU */
	
	//ALU(x= ,y= ,zx= ,nx= ,zy= ,ny= ,f(sum)= ,no(~out)= ,out= ,zr= ,ng= ) /* Hack ALU */	
	
	Not(in=instruction[15], out= isA);
	Not(in=isA, out=isC);
	
	And(a=isC, b=instruction[5], out=isLoadOutALU);
	Mux16(a=instruction,b=outALU, sel=isLoadOutALU, out=inAReg);
	
	Or(a=isA, b=instruction[5], out=storeAReg);
	ARegister(in=inAReg, load=storeAReg, out=outAReg, out[0..14]=addressM);
	
	Mux16(a=outAReg, b=inM, sel=instruction[12], out=outMuxAM);
	//DRegister(in=outALU, load=instruction[4], out=ALUInputFromDReg);
	
	And(a=instruction[3], b=isC, out=writeM);
	And(a=instruction[4], b=isC, out=storeDReg);
	
	DRegister(in=outALU,load=storeDReg,out=outDReg);
	
	
	
	And(a=instruction[11], b=isC, out=zx);
	And(a=instruction[10], b=isC, out=nx);
	And(a=instruction[9], b=isC, out=zy);
	And(a=instruction[8], b=isC, out=ny);
	And(a=instruction[7], b=isC, out=f);
	And(a=instruction[6], b=isC, out=no);
	
	ALU(x=outDReg, y=outMuxAM, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outALU, out=outM, zr=zr, ng=ng);

	
	Or(a=zr,b=ng,out=nPos);
    Not(in=nPos,out=pos);

    And(a=instruction[0],b=pos,out=JGT);
    And(a=instruction[1],b=zr,out=JEQ);
    And(a=instruction[2],b=ng,out=JLT);

    Or(a=JGT,b=JEQ,out=JGTJEQ);
    Or(a=JGTJEQ,b=JLT,out=JGTJEQJLT);

    And(a=JGTJEQJLT,b=isC,out=isJump);	
	
	
	PC(in=outAReg, load=isJump, inc=true, reset=reset, out[0..14]=pc);
}